[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "fiona.transform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fiona.transform",
        "description": "fiona.transform",
        "detail": "fiona.transform",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "rasterio.sample",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "rasterio.sample",
        "description": "rasterio.sample",
        "detail": "rasterio.sample",
        "documentation": {}
    },
    {
        "label": "occurrences",
        "importPath": "pygbif",
        "description": "pygbif",
        "isExtraImport": true,
        "detail": "pygbif",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "Progress",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "SpinnerColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "TextColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "get_output_path",
        "importPath": "src.utils.file_helper",
        "description": "src.utils.file_helper",
        "isExtraImport": true,
        "detail": "src.utils.file_helper",
        "documentation": {}
    },
    {
        "label": "get_output_path",
        "importPath": "src.utils.file_helper",
        "description": "src.utils.file_helper",
        "isExtraImport": true,
        "detail": "src.utils.file_helper",
        "documentation": {}
    },
    {
        "label": "file_path_from_specie",
        "importPath": "src.utils.file_helper",
        "description": "src.utils.file_helper",
        "isExtraImport": true,
        "detail": "src.utils.file_helper",
        "documentation": {}
    },
    {
        "label": "folium",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "folium",
        "description": "folium",
        "detail": "folium",
        "documentation": {}
    },
    {
        "label": "typer",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typer",
        "description": "typer",
        "detail": "typer",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "BioclimService",
        "importPath": "src.bioclim.bioclim_service",
        "description": "src.bioclim.bioclim_service",
        "isExtraImport": true,
        "detail": "src.bioclim.bioclim_service",
        "documentation": {}
    },
    {
        "label": "busca_especie_no_gbif",
        "importPath": "src.gbif.gbif_service",
        "description": "src.gbif.gbif_service",
        "isExtraImport": true,
        "detail": "src.gbif.gbif_service",
        "documentation": {}
    },
    {
        "label": "remove_outliers",
        "importPath": "src.utils.stats_helper",
        "description": "src.utils.stats_helper",
        "isExtraImport": true,
        "detail": "src.utils.stats_helper",
        "documentation": {}
    },
    {
        "label": "with_progress",
        "importPath": "src.utils.with_progress",
        "description": "src.utils.with_progress",
        "isExtraImport": true,
        "detail": "src.utils.with_progress",
        "documentation": {}
    },
    {
        "label": "FileWriter",
        "importPath": "src.view.file_writer",
        "description": "src.view.file_writer",
        "isExtraImport": true,
        "detail": "src.view.file_writer",
        "documentation": {}
    },
    {
        "label": "MapBuilder",
        "importPath": "src.view.map_builder",
        "description": "src.view.map_builder",
        "isExtraImport": true,
        "detail": "src.view.map_builder",
        "documentation": {}
    },
    {
        "label": "ReportBuilder",
        "importPath": "src.view.report_builder",
        "description": "src.view.report_builder",
        "isExtraImport": true,
        "detail": "src.view.report_builder",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"smd-py3.10\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"smd-py3.10\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"smd-py3.10\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"smd-py3.10\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"smd-py3.10\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "BioclimService",
        "kind": 6,
        "importPath": "src.bioclim.bioclim_service",
        "description": "src.bioclim.bioclim_service",
        "peekOfCode": "class BioclimService:\n    def reproject_coords(self, dataset, coords):\n        src_crs = \"EPSG:4326\"\n        dst_crs = dataset.crs.to_epsg()\n        xs = [c[0] for c in coords]\n        ys = [c[1] for c in coords]\n        xs, ys = fiona.transform.transform(src_crs, dst_crs, xs, ys)\n        return [[x, y] for x, y in zip(xs, ys)]\n    def layer_path(self, layer):\n        return f\"bioclim/data/wc2.1_5m_bio_{layer+1}.tif\"",
        "detail": "src.bioclim.bioclim_service",
        "documentation": {}
    },
    {
        "label": "BIOCLIM_LAYERS",
        "kind": 5,
        "importPath": "src.bioclim.bioclim_service",
        "description": "src.bioclim.bioclim_service",
        "peekOfCode": "BIOCLIM_LAYERS = [\n    (\"BIO1\", \"Annual Mean Temperature\"),\n    (\"BIO2\", \"Mean Diurnal Range (Mean of monthly (max temp - min temp))\"),\n    (\"BIO3\", \"Isothermality (BIO2/BIO7) (×100)\"),\n    (\"BIO4\", \"Temperature Seasonality (standard deviation ×100)\"),\n    (\"BIO5\", \"Max Temperature of Warmest Month\"),\n    (\"BIO6\", \"Min Temperature of Coldest Month\"),\n    (\"BIO7\", \"Temperature Annual Range (BIO5-BIO6)\"),\n    (\"BIO8\", \"Mean Temperature of Wettest Quarter\"),\n    (\"BIO9\", \"Mean Temperature of Driest Quarter\"),",
        "detail": "src.bioclim.bioclim_service",
        "documentation": {}
    },
    {
        "label": "busca_especie_no_gbif",
        "kind": 2,
        "importPath": "src.gbif.gbif_service",
        "description": "src.gbif.gbif_service",
        "peekOfCode": "def busca_especie_no_gbif(nome_cientifico, size=100):\n    infos_interesse = [\n        \"taxonKey\",\n        \"genus\",\n        \"species\",\n        \"decimalLatitude\",\n        \"decimalLongitude\",\n        \"country\",\n        \"coordinateUncertaintyInMeters\",\n        \"year\",",
        "detail": "src.gbif.gbif_service",
        "documentation": {}
    },
    {
        "label": "file_path_from_specie",
        "kind": 2,
        "importPath": "src.utils.file_helper",
        "description": "src.utils.file_helper",
        "peekOfCode": "def file_path_from_specie(specie: str) -> str:\n    return f\"{specie.lower().replace(' ', '_')}.xlsx\"\ndef get_output_path(filename: str, format=\"\") -> str:\n    foldername = \"../output\"\n    # Verifica se a pasta existe\n    if not os.path.exists(foldername):\n        # Se não existe, cria a pasta\n        os.makedirs(foldername)\n        print(f\"A pasta {foldername} foi criada.\")\n    if format:",
        "detail": "src.utils.file_helper",
        "documentation": {}
    },
    {
        "label": "get_output_path",
        "kind": 2,
        "importPath": "src.utils.file_helper",
        "description": "src.utils.file_helper",
        "peekOfCode": "def get_output_path(filename: str, format=\"\") -> str:\n    foldername = \"../output\"\n    # Verifica se a pasta existe\n    if not os.path.exists(foldername):\n        # Se não existe, cria a pasta\n        os.makedirs(foldername)\n        print(f\"A pasta {foldername} foi criada.\")\n    if format:\n        filename = f\"{filename}.{format}\"\n    return os.path.join(foldername, filename)",
        "detail": "src.utils.file_helper",
        "documentation": {}
    },
    {
        "label": "remove_outliers",
        "kind": 2,
        "importPath": "src.utils.stats_helper",
        "description": "src.utils.stats_helper",
        "peekOfCode": "def remove_outliers(df, columns, z_threshold=3):\n    # Seleciona apenas as colunas desejadas\n    subset_df = df[columns]\n    # Calcule o Z-Score para cada ponto de dados nas colunas selecionadas\n    z_scores = np.abs(stats.zscore(subset_df))\n    # Defina um limite para considerar os pontos como outliers\n    df_without_outliers = df[(z_scores < z_threshold).all(axis=1)]\n    return df_without_outliers",
        "detail": "src.utils.stats_helper",
        "documentation": {}
    },
    {
        "label": "with_progress",
        "kind": 2,
        "importPath": "src.utils.with_progress",
        "description": "src.utils.with_progress",
        "peekOfCode": "def with_progress(func, description=\"loading...\"):\n    def wrapper(*args, **kwargs):\n        with Progress(\n            SpinnerColumn(),\n            TextColumn(\"[progress.description]{task.description}\"),\n            transient=True,\n        ) as progress:\n            progress.add_task(description, total=None)\n            result = func(*args, **kwargs)\n            progress.stop()",
        "detail": "src.utils.with_progress",
        "documentation": {}
    },
    {
        "label": "with_timer",
        "kind": 2,
        "importPath": "src.utils.with_timer",
        "description": "src.utils.with_timer",
        "peekOfCode": "def with_timer(func):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time() - start\n        print(f\"Function {func.__name__} took {end:.4f} seconds\")\n        return result\n    return wrapper",
        "detail": "src.utils.with_timer",
        "documentation": {}
    },
    {
        "label": "FileWriter",
        "kind": 6,
        "importPath": "src.view.file_writer",
        "description": "src.view.file_writer",
        "peekOfCode": "class FileWriter:\n    def __init__(self) -> None:\n        self.save_funcs = {\n            \"csv\": self.save_csv,\n            \"json\": self.save_json,\n            \"xlsx\": self.save_xlsx,\n        }\n    def write(self, df: pd.DataFrame, format: str, output: str):\n        self.save_funcs[format](df, output)\n    def save_csv(self, df: pd.DataFrame, output: str):",
        "detail": "src.view.file_writer",
        "documentation": {}
    },
    {
        "label": "MapBuilder",
        "kind": 6,
        "importPath": "src.view.map_builder",
        "description": "src.view.map_builder",
        "peekOfCode": "class MapBuilder:\n    def build(self, dataframe: pd.DataFrame, output: str = None) -> folium.Map:\n        mapa = folium.Map(\n            location=[\n                dataframe[\"lat\"].mean(),\n                dataframe[\"lon\"].mean(),\n            ],\n            zoom_start=5,\n        )\n        # Adicionar marcadores para cada ponto no DataFrame",
        "detail": "src.view.map_builder",
        "documentation": {}
    },
    {
        "label": "ReportBuilder",
        "kind": 6,
        "importPath": "src.view.report_builder",
        "description": "src.view.report_builder",
        "peekOfCode": "class ReportBuilder:\n    def build(self, df: pd.DataFrame):\n        return df.describe().transpose()\n    def print(self, df: pd.DataFrame):\n        print(self.build(df))",
        "detail": "src.view.report_builder",
        "documentation": {}
    },
    {
        "label": "load_specie",
        "kind": 2,
        "importPath": "src.load_specie",
        "description": "src.load_specie",
        "peekOfCode": "def load_specie(\n    specie: StrArg,\n    output_format: StrOpt = \"xlsx\",\n    save_map: BoolOpt = False,\n    verbose: BoolOpt = False,\n    drop_empty: BoolOpt = False,\n    drop_outliners: BoolOpt = False,\n):\n    path = file_path_from_specie(specie)\n    ocorrencias = busca(specie)",
        "detail": "src.load_specie",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.load_specie",
        "description": "src.load_specie",
        "peekOfCode": "app = typer.Typer()\nbusca = with_progress(busca_especie_no_gbif, \"Buscando ocorrências no GBIF\")\nenriquece = with_progress(\n    BioclimService().augment_data_with_bioclimate, \"Enriquecendo dados com bioclima\"\n)\nsalva_dados = with_progress(FileWriter().write, \"Salvando dados\")\ncria_mapa = with_progress(MapBuilder().build, \"Criando mapa\")\ncria_relatorio = with_progress(ReportBuilder().build, \"Criando relatório\")\nimprime_relatorio = with_progress(ReportBuilder().print, \"Imprimindo relatório\")\nStrArg = Annotated[str, typer.Argument()]",
        "detail": "src.load_specie",
        "documentation": {}
    },
    {
        "label": "busca",
        "kind": 5,
        "importPath": "src.load_specie",
        "description": "src.load_specie",
        "peekOfCode": "busca = with_progress(busca_especie_no_gbif, \"Buscando ocorrências no GBIF\")\nenriquece = with_progress(\n    BioclimService().augment_data_with_bioclimate, \"Enriquecendo dados com bioclima\"\n)\nsalva_dados = with_progress(FileWriter().write, \"Salvando dados\")\ncria_mapa = with_progress(MapBuilder().build, \"Criando mapa\")\ncria_relatorio = with_progress(ReportBuilder().build, \"Criando relatório\")\nimprime_relatorio = with_progress(ReportBuilder().print, \"Imprimindo relatório\")\nStrArg = Annotated[str, typer.Argument()]\nStrOpt = Annotated[str, typer.Option()]",
        "detail": "src.load_specie",
        "documentation": {}
    },
    {
        "label": "enriquece",
        "kind": 5,
        "importPath": "src.load_specie",
        "description": "src.load_specie",
        "peekOfCode": "enriquece = with_progress(\n    BioclimService().augment_data_with_bioclimate, \"Enriquecendo dados com bioclima\"\n)\nsalva_dados = with_progress(FileWriter().write, \"Salvando dados\")\ncria_mapa = with_progress(MapBuilder().build, \"Criando mapa\")\ncria_relatorio = with_progress(ReportBuilder().build, \"Criando relatório\")\nimprime_relatorio = with_progress(ReportBuilder().print, \"Imprimindo relatório\")\nStrArg = Annotated[str, typer.Argument()]\nStrOpt = Annotated[str, typer.Option()]\nBoolOpt = Annotated[bool, typer.Option()]",
        "detail": "src.load_specie",
        "documentation": {}
    },
    {
        "label": "salva_dados",
        "kind": 5,
        "importPath": "src.load_specie",
        "description": "src.load_specie",
        "peekOfCode": "salva_dados = with_progress(FileWriter().write, \"Salvando dados\")\ncria_mapa = with_progress(MapBuilder().build, \"Criando mapa\")\ncria_relatorio = with_progress(ReportBuilder().build, \"Criando relatório\")\nimprime_relatorio = with_progress(ReportBuilder().print, \"Imprimindo relatório\")\nStrArg = Annotated[str, typer.Argument()]\nStrOpt = Annotated[str, typer.Option()]\nBoolOpt = Annotated[bool, typer.Option()]\n\"\"\"\n    Load species data from GBIF and enrich it with bioclimatic data.\n    Args:",
        "detail": "src.load_specie",
        "documentation": {}
    },
    {
        "label": "cria_mapa",
        "kind": 5,
        "importPath": "src.load_specie",
        "description": "src.load_specie",
        "peekOfCode": "cria_mapa = with_progress(MapBuilder().build, \"Criando mapa\")\ncria_relatorio = with_progress(ReportBuilder().build, \"Criando relatório\")\nimprime_relatorio = with_progress(ReportBuilder().print, \"Imprimindo relatório\")\nStrArg = Annotated[str, typer.Argument()]\nStrOpt = Annotated[str, typer.Option()]\nBoolOpt = Annotated[bool, typer.Option()]\n\"\"\"\n    Load species data from GBIF and enrich it with bioclimatic data.\n    Args:\n        specie (str): The name of the species to load.",
        "detail": "src.load_specie",
        "documentation": {}
    },
    {
        "label": "cria_relatorio",
        "kind": 5,
        "importPath": "src.load_specie",
        "description": "src.load_specie",
        "peekOfCode": "cria_relatorio = with_progress(ReportBuilder().build, \"Criando relatório\")\nimprime_relatorio = with_progress(ReportBuilder().print, \"Imprimindo relatório\")\nStrArg = Annotated[str, typer.Argument()]\nStrOpt = Annotated[str, typer.Option()]\nBoolOpt = Annotated[bool, typer.Option()]\n\"\"\"\n    Load species data from GBIF and enrich it with bioclimatic data.\n    Args:\n        specie (str): The name of the species to load.\n        output_format (str, optional): The format to save the data in. Defaults to \"xlsx\".",
        "detail": "src.load_specie",
        "documentation": {}
    },
    {
        "label": "imprime_relatorio",
        "kind": 5,
        "importPath": "src.load_specie",
        "description": "src.load_specie",
        "peekOfCode": "imprime_relatorio = with_progress(ReportBuilder().print, \"Imprimindo relatório\")\nStrArg = Annotated[str, typer.Argument()]\nStrOpt = Annotated[str, typer.Option()]\nBoolOpt = Annotated[bool, typer.Option()]\n\"\"\"\n    Load species data from GBIF and enrich it with bioclimatic data.\n    Args:\n        specie (str): The name of the species to load.\n        output_format (str, optional): The format to save the data in. Defaults to \"xlsx\".\n        save_map (bool, optional): Whether to save a map of the species occurrences. Defaults to False.",
        "detail": "src.load_specie",
        "documentation": {}
    },
    {
        "label": "StrArg",
        "kind": 5,
        "importPath": "src.load_specie",
        "description": "src.load_specie",
        "peekOfCode": "StrArg = Annotated[str, typer.Argument()]\nStrOpt = Annotated[str, typer.Option()]\nBoolOpt = Annotated[bool, typer.Option()]\n\"\"\"\n    Load species data from GBIF and enrich it with bioclimatic data.\n    Args:\n        specie (str): The name of the species to load.\n        output_format (str, optional): The format to save the data in. Defaults to \"xlsx\".\n        save_map (bool, optional): Whether to save a map of the species occurrences. Defaults to False.\n\"\"\"",
        "detail": "src.load_specie",
        "documentation": {}
    },
    {
        "label": "StrOpt",
        "kind": 5,
        "importPath": "src.load_specie",
        "description": "src.load_specie",
        "peekOfCode": "StrOpt = Annotated[str, typer.Option()]\nBoolOpt = Annotated[bool, typer.Option()]\n\"\"\"\n    Load species data from GBIF and enrich it with bioclimatic data.\n    Args:\n        specie (str): The name of the species to load.\n        output_format (str, optional): The format to save the data in. Defaults to \"xlsx\".\n        save_map (bool, optional): Whether to save a map of the species occurrences. Defaults to False.\n\"\"\"\n@app.command()",
        "detail": "src.load_specie",
        "documentation": {}
    },
    {
        "label": "BoolOpt",
        "kind": 5,
        "importPath": "src.load_specie",
        "description": "src.load_specie",
        "peekOfCode": "BoolOpt = Annotated[bool, typer.Option()]\n\"\"\"\n    Load species data from GBIF and enrich it with bioclimatic data.\n    Args:\n        specie (str): The name of the species to load.\n        output_format (str, optional): The format to save the data in. Defaults to \"xlsx\".\n        save_map (bool, optional): Whether to save a map of the species occurrences. Defaults to False.\n\"\"\"\n@app.command()\ndef load_specie(",
        "detail": "src.load_specie",
        "documentation": {}
    }
]